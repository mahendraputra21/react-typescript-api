{"version":3,"sources":["http-common.ts","services/TutorialService.ts","components/AddTutorial.tsx","components/Tutorial.tsx","components/TutorialsList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","create","baseURL","headers","TutorialService","getAll","http","get","id","data","post","update","put","remove","delete","removeAll","findByTitle","title","AddTutorial","initialTutorialState","description","published","useState","tutorial","setTutorial","submitted","setSubmitted","handleInputChange","event","target","name","value","className","onClick","htmlFor","type","required","onChange","TutorialDataService","then","response","console","log","catch","e","Tutorial","useParams","navigate","useNavigate","currentTutorial","setCurrentTutorial","message","setMessage","useEffect","getTutorial","updatePublished","status","TutorialsList","tutorials","setTutorials","currentIndex","setCurrentIndex","searchTitle","setSearchTitle","retrieveTutorials","placeholder","map","index","setActiveTutorial","to","App","href","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0af7e879.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://localhost:5107/api\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","import http from \"../http-common\";\nimport ITutorialData from \"../types/Tutorial\";\n\nconst getAll = () => {\n  return http.get<Array<ITutorialData>>(\"/Products\");\n};\n\nconst get = (id: any) => {\n  return http.get<ITutorialData>(`/Products/${id}`);\n};\n\nconst create = (data: ITutorialData) => {\n  return http.post<ITutorialData>(\"/Products\", data);\n};\n\nconst update = (id: any, data: ITutorialData) => {\n  return http.put<any>(`/Products/${id}`, data);\n};\n\nconst remove = (id: any) => {\n  return http.delete<any>(`/Products/${id}`);\n};\n\nconst removeAll = () => {\n  return http.delete<any>(`/tutorials`);\n};\n\nconst findByTitle = (title: string) => {\n  return http.get<Array<ITutorialData>>(`/tutorials?title=${title}`);\n};\n\nconst TutorialService = {\n  getAll,\n  get,\n  create,\n  update,\n  remove,\n  removeAll,\n  findByTitle,\n};\n\nexport default TutorialService;\n","import React, { useState, ChangeEvent } from \"react\";\nimport TutorialDataService from \"../services/TutorialService\";\nimport ITutorialData from '../types/Tutorial';\n\nconst AddTutorial: React.FC = () => {\n  const initialTutorialState = {\n    id: null,\n    title: \"\",\n    description: \"\",\n    published: false\n  };\n  const [tutorial, setTutorial] = useState<ITutorialData>(initialTutorialState);\n  const [submitted, setSubmitted] = useState<boolean>(false);\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    setTutorial({ ...tutorial, [name]: value });\n  };\n\n  const saveTutorial = () => {\n    var data = {\n      title: tutorial.title,\n      description: tutorial.description\n    };\n\n    TutorialDataService.create(data)\n      .then((response: any) => {\n        setTutorial({\n          id: response.data.id,\n          title: response.data.title,\n          description: response.data.description,\n          published: response.data.published\n        });\n        setSubmitted(true);\n        console.log(response.data);\n      })\n      .catch((e: Error) => {\n        console.log(e);\n      });\n  };\n\n  const newTutorial = () => {\n    setTutorial(initialTutorialState);\n    setSubmitted(false);\n  };\n\n  return (\n    <div className=\"submit-form\">\n      {submitted ? (\n        <div>\n          <h4>You submitted successfully!</h4>\n          <button className=\"btn btn-success\" onClick={newTutorial}>\n            Add\n          </button>\n        </div>\n      ) : (\n        <div>\n          <div className=\"form-group\">\n            <label htmlFor=\"title\">Title</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"title\"\n              required\n              value={tutorial.title}\n              onChange={handleInputChange}\n              name=\"title\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"description\"\n              required\n              value={tutorial.description}\n              onChange={handleInputChange}\n              name=\"description\"\n            />\n          </div>\n\n          <button onClick={saveTutorial} className=\"btn btn-success\">\n            Submit\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddTutorial;\n","import React, { useState, useEffect, ChangeEvent } from \"react\";\nimport { useParams, useNavigate } from 'react-router-dom';\n\nimport TutorialDataService from \"../services/TutorialService\";\nimport ITutorialData from \"../types/Tutorial\";\n\nconst Tutorial: React.FC = () => {\n  const { id }= useParams();\n  let navigate = useNavigate();\n\n  const initialTutorialState = {\n    id: null,\n    title: \"\",\n    description: \"\",\n    published: false\n  };\n  const [currentTutorial, setCurrentTutorial] = useState<ITutorialData>(initialTutorialState);\n  const [message, setMessage] = useState<string>(\"\");\n\n  const getTutorial = (id: string) => {\n    TutorialDataService.get(id)\n      .then((response: any) => {\n        setCurrentTutorial(response.data);\n        console.log(response.data);\n      })\n      .catch((e: Error) => {\n        console.log(e);\n      });\n  };\n\n  useEffect(() => {\n    if (id)\n      getTutorial(id);\n  }, [id]);\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    setCurrentTutorial({ ...currentTutorial, [name]: value });\n  };\n\n  const updatePublished = (status: boolean) => {\n    var data = {\n      id: currentTutorial.id,\n      title: currentTutorial.title,\n      description: currentTutorial.description,\n      published: status\n    };\n\n    TutorialDataService.update(currentTutorial.id, data)\n      .then((response: any) => {\n        console.log(response.data);\n        setCurrentTutorial({ ...currentTutorial, published: status });\n        setMessage(\"The status was updated successfully!\");\n      })\n      .catch((e: Error) => {\n        console.log(e);\n      });\n  };\n\n  const updateTutorial = () => {\n    TutorialDataService.update(currentTutorial.id, currentTutorial)\n      .then((response: any) => {\n        console.log(response.data);\n        setMessage(\"The tutorial was updated successfully!\");\n      })\n      .catch((e: Error) => {\n        console.log(e);\n      });\n  };\n\n  const deleteTutorial = () => {\n    TutorialDataService.remove(currentTutorial.id)\n      .then((response: any) => {\n        console.log(response.data);\n        navigate(\"/tutorials\");\n      })\n      .catch((e: Error) => {\n        console.log(e);\n      });\n  };\n\n  return (\n    <div>\n      {currentTutorial ? (\n        <div className=\"edit-form\">\n          <h4>Tutorial</h4>\n          <form>\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">Title</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"title\"\n                name=\"title\"\n                value={currentTutorial.title}\n                onChange={handleInputChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"description\">Description</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"description\"\n                name=\"description\"\n                value={currentTutorial.description}\n                onChange={handleInputChange}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>\n                <strong>Status:</strong>\n              </label>\n              {currentTutorial.published ? \"Published\" : \"Pending\"}\n            </div>\n          </form>\n\n          {currentTutorial.published ? (\n            <button\n              className=\"badge badge-primary mr-2\"\n              onClick={() => updatePublished(false)}\n            >\n              UnPublish\n            </button>\n          ) : (\n            <button\n              className=\"badge badge-primary mr-2\"\n              onClick={() => updatePublished(true)}\n            >\n              Publish\n            </button>\n          )}\n\n          <button className=\"badge badge-danger mr-2\" onClick={deleteTutorial}>\n            Delete\n          </button>\n\n          <button\n            type=\"submit\"\n            className=\"badge badge-success\"\n            onClick={updateTutorial}\n          >\n            Update\n          </button>\n          <p>{message}</p>\n        </div>\n      ) : (\n        <div>\n          <br />\n          <p>Please click on a Tutorial...</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Tutorial;\n","import React, { useState, useEffect, ChangeEvent } from \"react\";\nimport TutorialDataService from \"../services/TutorialService\";\nimport { Link } from \"react-router-dom\";\nimport ITutorialData from '../types/Tutorial';\n\nconst TutorialsList: React.FC = () => {\n  const [tutorials, setTutorials] = useState<Array<ITutorialData>>([]);\n  const [currentTutorial, setCurrentTutorial] = useState<ITutorialData | null>(null);\n  const [currentIndex, setCurrentIndex] = useState<number>(-1);\n  const [searchTitle, setSearchTitle] = useState<string>(\"\");\n\n  useEffect(() => {\n    retrieveTutorials();\n  }, []);\n\n  const onChangeSearchTitle = (e: ChangeEvent<HTMLInputElement>) => {\n    const searchTitle = e.target.value;\n    setSearchTitle(searchTitle);\n  };\n\n  const retrieveTutorials = () => {\n    TutorialDataService.getAll()\n      .then((response: any) => {\n        setTutorials(response.data);\n        console.log(response.data);\n      })\n      .catch((e: Error) => {\n        console.log(e);\n      });\n  };\n\n  const refreshList = () => {\n    retrieveTutorials();\n    setCurrentTutorial(null);\n    setCurrentIndex(-1);\n  };\n\n  const setActiveTutorial = (tutorial: ITutorialData, index: number) => {\n    setCurrentTutorial(tutorial);\n    setCurrentIndex(index);\n  };\n\n  const removeAllTutorials = () => {\n    TutorialDataService.removeAll()\n      .then((response: any) => {\n        console.log(response.data);\n        refreshList();\n      })\n      .catch((e: Error) => {\n        console.log(e);\n      });\n  };\n\n  const findByTitle = () => {\n    TutorialDataService.findByTitle(searchTitle)\n      .then((response: any) => {\n        setTutorials(response.data);\n        setCurrentTutorial(null);\n        setCurrentIndex(-1);\n        console.log(response.data);\n      })\n      .catch((e: Error) => {\n        console.log(e);\n      });\n  };\n\n  return (\n    <div className=\"list row\">\n      <div className=\"col-md-8\">\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search by title\"\n            value={searchTitle}\n            onChange={onChangeSearchTitle}\n          />\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              type=\"button\"\n              onClick={findByTitle}\n            >\n              Search\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"col-md-6\">\n        <h4>Tutorials List</h4>\n\n        <ul className=\"list-group\">\n          {tutorials &&\n            tutorials.map((tutorial, index) => (\n              <li\n                className={\n                  \"list-group-item \" + (index === currentIndex ? \"active\" : \"\")\n                }\n                onClick={() => setActiveTutorial(tutorial, index)}\n                key={index}\n              >\n                {tutorial.title}\n              </li>\n            ))}\n        </ul>\n\n        <button\n          className=\"m-3 btn btn-sm btn-danger\"\n          onClick={removeAllTutorials}\n        >\n          Remove All\n        </button>\n      </div>\n      <div className=\"col-md-6\">\n        {currentTutorial ? (\n          <div>\n            <h4>Tutorial</h4>\n            <div>\n              <label>\n                <strong>Title:</strong>\n              </label>{\" \"}\n              {currentTutorial.title}\n            </div>\n            <div>\n              <label>\n                <strong>Description:</strong>\n              </label>{\" \"}\n              {currentTutorial.description}\n            </div>\n            <div>\n              <label>\n                <strong>Status:</strong>\n              </label>{\" \"}\n              {currentTutorial.published ? \"Published\" : \"Pending\"}\n            </div>\n\n            <Link\n              to={\"/tutorials/\" + currentTutorial.id}\n              className=\"badge badge-warning\"\n            >\n              Edit\n            </Link>\n          </div>\n        ) : (\n          <div>\n            <br />\n            <p>Please click on a Tutorial...</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TutorialsList;\n","import React from \"react\";\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddTutorial from \"./components/AddTutorial\";\nimport Tutorial from \"./components/Tutorial\";\nimport TutorialsList from \"./components/TutorialsList\";\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <a href=\"/tutorials\" className=\"navbar-brand\">\n          bezKoder\n        </a>\n        <div className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <Link to={\"/tutorials\"} className=\"nav-link\">\n              Tutorials\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to={\"/add\"} className=\"nav-link\">\n              Add\n            </Link>\n          </li>\n        </div>\n      </nav>\n\n      <div className=\"container mt-3\">\n        <Routes>\n          <Route path=\"/\" element={<TutorialsList/>} />\n          <Route path=\"/tutorials\" element={<TutorialsList/>} />\n          <Route path=\"/add\" element={<AddTutorial/>} />\n          <Route path=\"/tutorials/:id\" element={<Tutorial/>} />\n        </Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}